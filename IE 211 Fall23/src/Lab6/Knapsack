import time

class Knapsack:
     class Item:
         index = -1
         ratio = -1

         def __lt__(self, other):
             return self.ratio > other.ratio
     
     x = []
     runTime = 0
     LItems = []

     def ImplementBinaryKnapsack_v1(self, values, volumes, totalVolume):
         remainingVolume = totalVolume
         totalValue = 0
         size = len(values)
         self.x = [0] * size

         self.runTime = time.time_ns()//1000000
         while True:
             best_i = -1
             best_ratio = -1

             for i in range(size):
                 curr_ratio = values[i]/volumes[i]
                 if curr_ratio > best_ratio and self.x[i] == 0:
                     best_ratio = curr_ratio
                     best_i = i
             if best_i == -1:
                 break
             elif remainingVolume < volumes[best_i]:
                 break
             else:
                 self.x[best_i] = 1
                 remainingVolume -= volumes[best_i]
                 totalValue += values[best_i]

         self.runTime = time.time_ns() // 1000000 - self.runTime

         print("The results for Binary knapsack n2 implementation:")
         print("The selected items are ")
         print(*self.x)
         print("The total value is", totalValue)
         print("The runtime is ", self.runTime)

     def ImplementBinaryKnapsack_v2(self, values, volumes, totalVolume):
         remainingVolume = totalVolume
         totalValue = 0
         size = len(values)
         self.x = [0] * size

         self.runTime = time.time_ns()//1000000
         self.LItems.clear()
         for i in range(size):
             item = self.Item()
             item.index = i
             item.ratio = values[i] * 1.0 / volumes[i]
             self.LItems.append(item)

         self.LItems.sort()
         #for i in range(size):
         #    print(self.LItems[i].index, end= " ")

         for i in range(size):
             curr_index = self.LItems[i].index
             if self.x[curr_index] == 0:
                 if remainingVolume >= volumes[curr_index]:
                     self.x[curr_index] = 1
                     remainingVolume -= volumes[curr_index]
                     totalValue += values[curr_index]
                 else:
                     break
         self.runTime = time.time_ns() // 1000000 - self.runTime

         print("The results for Binary knapsack nlogn implementation:")
         print("The selected items are ")
         print(*self.x)
         print("The total value is", totalValue)
         print("The runtime is ", self.runTime)

     def ImplementBinaryKnapsack(self, values, volumes, totalVolume, isEfficient):
         if not isEfficient:
             self.ImplementBinaryKnapsack_v1(values, volumes, totalVolume)
         else:
             self.ImplementBinaryKnapsack_v2(values, volumes, totalVolume)


     def ImplementFractionalKnapsack_v1(self, values, volumes, totalVolume):
         remainingVolume = totalVolume
         totalValue = 0
         size = len(values)
         self.x = [0] * size

         self.runTime = time.time_ns()//1000000
         while True:
             best_i = -1
             best_ratio = -1

             for i in range(size):
                 curr_ratio = values[i]/volumes[i]
                 if curr_ratio > best_ratio and self.x[i] == 0:
                     best_ratio = curr_ratio
                     best_i = i
             if best_i == -1:
                 break
             elif remainingVolume < volumes[best_i]:
                 self.x[best_i] = remainingVolume / volumes[best_i]
                 remainingVolume -= 0
                 totalValue += values[best_i] * self.x[best_i]
             else:
                 self.x[best_i] = 1
                 remainingVolume -= volumes[best_i]
                 totalValue += values[best_i]

         self.runTime = time.time_ns() // 1000000 - self.runTime

         print("The results for Fractional knapsack n2 implementation:")
         print("The selected items are ")
         print(*self.x)
         print("The total value is", totalValue)
         print("The runtime is ", self.runTime)

     def ImplementFractionalKnapsack_v2(self, values, volumes, totalVolume):
         remainingVolume = totalVolume
         totalValue = 0
         size = len(values)
         self.x = [0] * size

         self.runTime = time.time_ns()//1000000
         self.LItems.clear()
         for i in range(size):
             item = self.Item()
             item.index = i
             item.ratio = values[i] * 1.0 / volumes[i]
             self.LItems.append(item)

         self.LItems.sort()
         # for i in range(size):
         #     print(self.LItems[i].index, end= " ")

         for i in range(size):
             curr_index = self.LItems[i].index
             if self.x[curr_index] == 0:
                 if remainingVolume >= volumes[curr_index]:
                     self.x[curr_index] = 1
                     remainingVolume -= volumes[curr_index]
                     totalValue += values[curr_index]
                 else:
                     self.x[curr_index] = remainingVolume / volumes[curr_index]
                     remainingVolume -= 0
                     totalValue += values[curr_index] * self.x[curr_index]
                     break
         self.runTime = time.time_ns() // 1000000 - self.runTime

         print("The results for Fractional knapsack nlogn implementation:")
         print("The selected items are ")
         print(*self.x)
         print("The total value is", totalValue)
         print("The runtime is ", self.runTime)

     def ImplementFractionalKnapsack(self, values, volumes, totalVolume, isEfficient):
         if not isEfficient:
             self.ImplementFractionalKnapsack_v1(values, volumes, totalVolume)
         else:
             self.ImplementFractionalKnapsack_v2(values, volumes, totalVolume)
